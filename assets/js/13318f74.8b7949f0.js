"use strict";(self.webpackChunkti_engine_docs=self.webpackChunkti_engine_docs||[]).push([[284],{3494:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorials/api","title":"Tutorial 4: Connecting to a Market Data API (JavaScript)","description":"Learn how to fetch fresh OHLCV data from a public API, convert it into plain arrays, and analyze it with ti-engine.","source":"@site/docs/tutorials/api.md","sourceDirName":"tutorials","slug":"/tutorials/api","permalink":"/docs/docs/tutorials/api","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Tutorial 3: Advanced Usage of ti-engine (RSI variant evaluation)","permalink":"/docs/docs/tutorials/advanced"},"next":{"title":"Tutorial: Hybrid REST + WebSocket indicators \u2014 bulk & single calculations with ti-engine","permalink":"/docs/docs/tutorials/websockets"}}');var a=i(4848),s=i(8453);const r={},o="Tutorial 4: Connecting to a Market Data API (JavaScript)",l={},c=[{value:"\ud83c\udfaf Goal",id:"-goal",level:2},{value:"\ud83d\udce6 Prerequisites",id:"-prerequisites",level:2},{value:"\ud83d\udd0d Using Binance\u2019s free market data API",id:"-using-binances-free-market-data-api",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udcbb Fetch OHLCV and map to arrays",id:"-fetch-ohlcv-and-map-to-arrays",level:2},{value:"\u2699\ufe0f Run indicators on fresh data",id:"\ufe0f-run-indicators-on-fresh-data",level:2},{value:"\ud83d\udcca Visualize (optional)",id:"-visualize-optional",level:2},{value:"\ud83d\udd04 Real-time and incremental updates (optional)",id:"-real-time-and-incremental-updates-optional",level:2},{value:"\ud83e\uddea Handling alignment and edge cases",id:"-handling-alignment-and-edge-cases",level:2},{value:"\ud83d\udee1\ufe0f Disclaimer",id:"\ufe0f-disclaimer",level:2}];function d(n){const e={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"tutorial-4-connecting-to-a-market-data-api-javascript",children:"Tutorial 4: Connecting to a Market Data API (JavaScript)"})}),"\n",(0,a.jsxs)(e.p,{children:["Learn how to fetch fresh OHLCV data from a public API, convert it into plain arrays, and analyze it with ti-engine.",(0,a.jsx)(e.br,{}),"\n","This workflow enables automated, up-to-date, and repeatable research pipelines \u2014 without CSVs."]}),"\n",(0,a.jsx)(e.p,{children:"Series so far:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/docs/docs/tutorials/getting-started",children:"01 - Getting started with ti-engine"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/docs/docs/tutorials/plotting",children:"02 - Plotting your indicators"})}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/docs/docs/tutorials/advanced",children:"03 - More advanced use cases"})}),"\n",(0,a.jsx)(e.li,{children:"[04 - Getting data from an API] (this file)"}),"\n",(0,a.jsx)(e.li,{children:(0,a.jsx)(e.a,{href:"/docs/docs/tutorials/websockets",children:"05 - Real-time updates with WebSockets (single vs bulk)"})}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-goal",children:"\ud83c\udfaf Goal"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Fetch OHLCV (Open, High, Low, Close, Volume) data from a free market data API"}),"\n",(0,a.jsx)(e.li,{children:"Parse JSON into arrays suitable for ti-engine"}),"\n",(0,a.jsx)(e.li,{children:"Run your indicator pipeline on fresh data (SMA, Bands, RSI, ATR)"}),"\n",(0,a.jsx)(e.li,{children:"Understand alignment for rolling outputs"}),"\n",(0,a.jsx)(e.li,{children:"Optional: wire results into the Plotly dashboard from Tutorial 2"}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-prerequisites",children:"\ud83d\udce6 Prerequisites"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["JavaScript runtime:","\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Browser: modern browser with ESM modules"}),"\n",(0,a.jsx)(e.li,{children:"Node.js: v18+ (has global fetch). For older Node, install node-fetch."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["Packages:","\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"npm install ti-engine\n# If plotting later:\n# npm install plotly.js-dist-min\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Initialize ti-engine (required in browsers; no-op in Node):"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:'import init from "ti-engine";\nawait init();\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-using-binances-free-market-data-api",children:"\ud83d\udd0d Using Binance\u2019s free market data API"}),"\n",(0,a.jsx)(e.p,{children:"We\u2019ll use Binance\u2019s public API for OHLCV \u201cklines\u201d (no API key required)."}),"\n",(0,a.jsxs)(e.p,{children:["Docs: ",(0,a.jsx)(e.a,{href:"https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data",children:"https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data"})]}),"\n",(0,a.jsx)(e.p,{children:"Example endpoint (daily BTCUSDT, 365 bars):"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Replace ",(0,a.jsx)(e.code,{children:"BTCUSDT"})," with another supported symbol."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"interval"})," can be ",(0,a.jsx)(e.code,{children:"1d"}),", ",(0,a.jsx)(e.code,{children:"1h"}),", etc."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"limit"})," controls number of bars."]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"Note: Some environments may encounter CORS restrictions for browser-based fetches. If so, use Node, a proxy, or your own backend."}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-fetch-ohlcv-and-map-to-arrays",children:"\ud83e\uddd1\u200d\ud83d\udcbb Fetch OHLCV and map to arrays"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:'// api-connection.mjs\nimport init, {\n  movingAverage,\n  momentumIndicators,\n  candleIndicators,\n  otherIndicators,\n  ConstantModelType,\n  DeviationModel,\n  MovingAverageType\n} from "ti-engine";\n\nawait init();\n\n/**\n * Fetch OHLCV from Binance and map into arrays.\n * @param {string} symbol e.g., "BTCUSDT"\n * @param {string} interval e.g., "1d", "1h"\n * @param {number} limit number of bars (<= 1500 typically)\n * @returns {Promise<{date:string[], open:number[], high:number[], low:number[], close:number[], volume:number[]}>}\n */\nasync function fetchBinanceKlines(symbol = "BTCUSDT", interval = "1d", limit = 365) {\n  const url = new URL("https://api.binance.com/api/v3/klines");\n  url.searchParams.set("symbol", symbol);\n  url.searchParams.set("interval", interval);\n  url.searchParams.set("limit", String(limit));\n\n  const resp = await fetch(url);\n  if (!resp.ok) {\n    throw new Error(`HTTP ${resp.status} ${resp.statusText}`);\n  }\n  const raw = await resp.json();\n  // Each row: [OpenTime, Open, High, Low, Close, Volume, CloseTime, ...]\n  const date = [];\n  const open = [];\n  const high = [];\n  const low = [];\n  const close = [];\n  const volume = [];\n\n  for (const row of raw) {\n    const openTime = row[0];\n    date.push(new Date(openTime).toISOString()); // ISO datetime; use .slice(0,10) for YYYY-MM-DD\n    open.push(parseFloat(row[1]));\n    high.push(parseFloat(row[2]));\n    low.push(parseFloat(row[3]));\n    close.push(parseFloat(row[4]));\n    volume.push(parseFloat(row[5]));\n  }\n\n  return { date, open, high, low, close, volume };\n}\n\nconst { date, open, high, low, close } = await fetchBinanceKlines("BTCUSDT", "1d", 365);\nconsole.log(`Fetched ${close.length} bars for BTCUSDT`);\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"\ufe0f-run-indicators-on-fresh-data",children:"\u2699\ufe0f Run indicators on fresh data"}),"\n",(0,a.jsx)(e.p,{children:"We\u2019ll compute:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"SMA(20)"}),"\n",(0,a.jsx)(e.li,{children:"Moving Constant Bands (EMA + StdDev, x2, period 20)"}),"\n",(0,a.jsx)(e.li,{children:"RSI(20) with SmoothedMovingAverage"}),"\n",(0,a.jsx)(e.li,{children:"ATR(14) with ExponentialMovingAverage"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:'const smaPeriod = 20;\nconst sma20 = movingAverage.bulk.movingAverage(\n  close,\n  MovingAverageType.Simple,\n  smaPeriod\n);\n\n// Moving Constant Bands\nconst bandsPeriod = 20;\nconst bands = candleIndicators.bulk.movingConstantBands(\n  close,\n  ConstantModelType.ExponentialMovingAverage,\n  DeviationModel.StandardDeviation,\n  2.0,\n  bandsPeriod\n);\nconst mcbLower = bands.map(t => t[0]);\nconst mcbMid   = bands.map(t => t[1]);\nconst mcbUpper = bands.map(t => t[2]);\n\n// RSI\nconst rsiPeriod = 20;\nconst rsi20 = momentumIndicators.bulk.relativeStrengthIndex(\n  close,\n  ConstantModelType.SmoothedMovingAverage,\n  rsiPeriod\n);\n\n// ATR\nconst atrPeriod = 14;\nconst atr14 = otherIndicators.bulk.averageTrueRange(\n  close, // previous closes\n  high,\n  low,\n  ConstantModelType.ExponentialMovingAverage,\n  atrPeriod\n);\n\n// Alignment: rolling outputs are shorter. Right-align to dates:\nconst tail = (xs, n) => xs.slice(xs.length - n);\nconst xSMA   = tail(date, sma20.length);\nconst xBands = tail(date, bands.length);\nconst xRSI   = tail(date, rsi20.length);\nconst xATR   = tail(date, atr14.length);\n\n// Inspect latest values\nconsole.log("Latest SMA20:", sma20[sma20.length - 1]);\nconsole.log("Latest Bands:", {\n  lower: mcbLower[mcbLower.length - 1],\n  mid:   mcbMid[mcbMid.length - 1],\n  upper: mcbUpper[mcbUpper.length - 1]\n});\nconsole.log("Latest RSI20:", rsi20[rsi20.length - 1]);\nconsole.log("Latest ATR14:", atr14[atr14.length - 1]);\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-visualize-optional",children:"\ud83d\udcca Visualize (optional)"}),"\n",(0,a.jsxs)(e.p,{children:["Reuse the Plotly layout from Tutorial 2.",(0,a.jsx)(e.br,{}),"\n","At minimum, replace the hardcoded arrays there with your freshly fetched arrays here:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Candles: x=date, open/open, high/high, low/low, close/close"}),"\n",(0,a.jsx)(e.li,{children:"SMA trace: x=xSMA, y=sma20"}),"\n",(0,a.jsx)(e.li,{children:"Bands traces: x=xBands with mcbUpper/mcbLower fill and mcbMid line"}),"\n",(0,a.jsx)(e.li,{children:"RSI trace: x=xRSI, y=rsi20 (+ horizontal shapes at 70/30)"}),"\n",(0,a.jsx)(e.li,{children:"ATR trace: x=xATR, y=atr14"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"See: Tutorial 2: Visualizing Indicators with Plotly (JavaScript)"}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-real-time-and-incremental-updates-optional",children:"\ud83d\udd04 Real-time and incremental updates (optional)"}),"\n",(0,a.jsx)(e.p,{children:"When a new bar arrives, you can compute \u201csingle\u201d values on the last N samples without recomputing the entire history:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:'import { momentumIndicators, otherIndicators, candleIndicators, ConstantModelType, DeviationModel } from "ti-engine";\n\n// Example: update RSI(20), ATR(14), and Bands(20) on the latest bar\nfunction computeLatestSnapshots(close, high, low) {\n  const latestRSI = momentumIndicators.single.relativeStrengthIndex(\n    close.slice(-rsiPeriod),\n    ConstantModelType.SmoothedMovingAverage\n  );\n\n  const latestATR = otherIndicators.single.averageTrueRange(\n    close.slice(-atrPeriod), // previous closes for the window\n    high.slice(-atrPeriod),\n    low.slice(-atrPeriod),\n    ConstantModelType.ExponentialMovingAverage\n  );\n\n  const [lower, mid, upper] = candleIndicators.single.movingConstantBands(\n    close.slice(-bandsPeriod),\n    ConstantModelType.ExponentialMovingAverage,\n    DeviationModel.StandardDeviation,\n    2.0\n  );\n\n  return { latestRSI, latestATR, bands: { lower, mid, upper } };\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:"Note: For true live streaming, also handle partial candles (intra-bar) vs. closed candles and consider debouncing update frequency."}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"-handling-alignment-and-edge-cases",children:"\ud83e\uddea Handling alignment and edge cases"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Rolling functions return arrays of length L - N + 1 (L = input length, N = period)."}),"\n",(0,a.jsx)(e.li,{children:"Right-align x-axis values with the tail of your date/time array."}),"\n",(0,a.jsx)(e.li,{children:"Ensure arrays (open, high, low, close) have identical lengths."}),"\n",(0,a.jsx)(e.li,{children:"For very small histories (length < period), compute only single values on available windows."}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"\ufe0f-disclaimer",children:"\ud83d\udee1\ufe0f Disclaimer"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Respect API rate limits and terms of use."}),"\n",(0,a.jsx)(e.li,{children:"Add retries and error handling for production usage."}),"\n",(0,a.jsx)(e.li,{children:"This example is educational; validate indicators and assumptions before using in live systems."}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:"Happy fetching! \ud83e\udd80\ud83c\udf10\ud83d\udcc8"})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>o});var t=i(6540);const a={},s=t.createContext(a);function r(n){const e=t.useContext(s);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);