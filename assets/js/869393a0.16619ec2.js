"use strict";(self.webpackChunkti_engine_docs=self.webpackChunkti_engine_docs||[]).push([[982],{6487:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"howto/choose-deviation-model","title":"How to determine the best DeviationModel for a ti-engine function","description":"This guide shows how to programmatically determine the best DeviationModel for your indicator using the JavaScript package ti-engine.","source":"@site/docs/howto/choose-deviation-model.md","sourceDirName":"howto","slug":"/howto/choose-deviation-model","permalink":"/ti-engine/howto/choose-deviation-model","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"How to determine the best ConstantModelType for a ti-engine function","permalink":"/ti-engine/howto/choose-constant-model"},"next":{"title":"How to determine the best period for a ti-engine function","permalink":"/ti-engine/howto/choose-period"}}');var o=i(4848),a=i(8453);const s={},l="How to determine the best DeviationModel for a ti-engine function",d={},r=[{value:"\ud83c\udfaf Goal",id:"-goal",level:2},{value:"\ud83d\udce6 Requirements",id:"-requirements",level:2},{value:"\ud83d\udcbb Step-by-Step",id:"-step-by-step",level:2},{value:"1. Use an in-memory dataset",id:"1-use-an-in-memory-dataset",level:3},{value:"2. Calculate Moving Constant Bands for multiple deviation models",id:"2-calculate-moving-constant-bands-for-multiple-deviation-models",level:3},{value:"3. Rate each model to find the best",id:"3-rate-each-model-to-find-the-best",level:3},{value:"4. Full example",id:"4-full-example",level:3},{value:"\ud83e\uddea Example Output",id:"-example-output",level:2},{value:"\u2705 Next Steps",id:"-next-steps",level:2}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"how-to-determine-the-best-deviationmodel-for-a-ti-engine-function",children:"How to determine the best DeviationModel for a ti-engine function"})}),"\n",(0,o.jsx)(n.p,{children:"This guide shows how to programmatically determine the best DeviationModel for your indicator using the JavaScript package ti-engine."}),"\n",(0,o.jsx)(n.p,{children:"The rating model is overly simplified and should be refined to suit your needs before usage."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-goal",children:"\ud83c\udfaf Goal"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Determine the best DeviationModel for Moving Constant Bands using an in-memory dataset"}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-requirements",children:"\ud83d\udce6 Requirements"}),"\n",(0,o.jsx)(n.p,{children:"Install ti-engine:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm install ti-engine\n\n# yarn\nyarn add ti-engine\n\n# pnpm\npnpm add ti-engine\n"})}),"\n",(0,o.jsx)(n.p,{children:"Initialize (recommended, required in browsers):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import init from "ti-engine";\n\nawait init(); // In Node it\'s a no-op; in browsers it loads WASM\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-step-by-step",children:"\ud83d\udcbb Step-by-Step"}),"\n",(0,o.jsx)(n.h3,{id:"1-use-an-in-memory-dataset",children:"1. Use an in-memory dataset"}),"\n",(0,o.jsx)(n.p,{children:"For this guide, we\u2019ll use a constant array of prices:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const data = [\n  6037.59, 5970.84, 5906.94, 5881.63, 5868.55, 5942.47, 5975.38, 5909.03,\n  5918.25, 5827.04, 5836.22, 5842.91, 5949.91, 5937.34, 5996.66, 6049.24,\n  6086.37, 6118.71, 6101.24, 6012.28, 6067.70, 6039.31, 6071.17, 6040.53,\n  5994.57, 6037.88, 6061.48, 6083.57, 6025.99, 6066.44, 6068.50, 6051.97,\n  6115.07, 6114.63, 6129.58, 6144.15, 6117.52, 6013.13, 5983.25, 5955.25,\n  5956.06, 5861.57, 5954.50, 5849.72, 5778.15, 5842.63, 5738.52, 5770.20,\n  5614.56, 5572.07, 5599.30, 5521.52, 5638.94\n];\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-calculate-moving-constant-bands-for-multiple-deviation-models",children:"2. Calculate Moving Constant Bands for multiple deviation models"}),"\n",(0,o.jsx)(n.p,{children:"The default deviation model is the standard deviation; however other models may provide more insight."}),"\n",(0,o.jsx)(n.p,{children:"We\u2019ll test several deviation models while keeping the constant model fixed (e.g., ExponentialMovingAverage), a deviation multiplier (e.g., 2.0), and a short period (e.g., 5) for illustration."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import init, {\n  candleIndicators,\n  ConstantModelType,\n  DeviationModel\n} from "ti-engine";\n\nawait init();\n\nconst period = 5;\nconst deviationMultiplier = 2.0;\nconst constantModel = ConstantModelType.ExponentialMovingAverage;\n\nconst deviationModels = [\n  DeviationModel.StandardDeviation,\n  DeviationModel.MeanAbsoluteDeviation,\n  DeviationModel.MedianAbsoluteDeviation,\n  DeviationModel.ModeAbsoluteDeviation,\n  DeviationModel.UlcerIndex,\n];\n\n// Example:\n// const bands = candleIndicators.bulk.movingConstantBands(\n//   data,\n//   constantModel,\n//   DeviationModel.StandardDeviation,\n//   deviationMultiplier,\n//   period\n// );\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-rate-each-model-to-find-the-best",children:"3. Rate each model to find the best"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"The logic is overly simple for the purpose of the guide."}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"If price > upper band (overbought) and next price < current price, model gets +1"}),"\n",(0,o.jsx)(n.li,{children:"If price < lower band (oversold) and next price > current price, model gets +1"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:'We normalize the score by the number of "attempts" (how many times we evaluated a signal).'}),"\n",(0,o.jsx)(n.p,{children:"Alignment note for bulk outputs:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"candleIndicators.bulk.movingConstantBands(prices, \u2026, period) returns an array of length prices.length - period + 1"}),"\n",(0,o.jsx)(n.li,{children:"out[0] corresponds to the window prices[0..period-1] and \u201canchors\u201d at prices[period-1]"}),"\n",(0,o.jsx)(n.li,{children:"For price index i (starting at period-1), the bands index is bandsIdx = i - (period - 1)"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import {\n  candleIndicators,\n  ConstantModelType,\n  DeviationModel\n} from "ti-engine";\n\n/**\n * Returns { model: DeviationModel, rating: number }\n */\nfunction chooseBestDeviationModel(\n  prices,\n  {\n    constantModelType = ConstantModelType.ExponentialMovingAverage,\n    deviationMultiplier = 2.0,\n    period = 5,\n  } = {}\n) {\n  const candidates = [\n    DeviationModel.StandardDeviation,\n    DeviationModel.MeanAbsoluteDeviation,\n    DeviationModel.MedianAbsoluteDeviation,\n    DeviationModel.ModeAbsoluteDeviation,\n    DeviationModel.UlcerIndex,\n  ];\n\n  let bestRating = -1;\n  let bestModel = candidates[0];\n\n  for (const dm of candidates) {\n    const bands = candleIndicators.bulk.movingConstantBands(\n      prices,\n      constantModelType,\n      dm,\n      deviationMultiplier,\n      period\n    );\n\n    let currentRating = 0;\n    let attempts = 0;\n\n    // bands[0] anchors at prices[period - 1]\n    for (let i = period - 1; i < prices.length - 1; i++) {\n      const bandsIdx = i - (period - 1);\n      const [lower, , upper] = bands[bandsIdx];\n\n      // Overbought: expect next price to fall\n      if (prices[i] > upper) {\n        attempts += 1;\n        if (prices[i + 1] < prices[i]) currentRating += 1;\n      }\n\n      // Oversold: expect next price to rise\n      if (prices[i] < lower) {\n        attempts += 1;\n        if (prices[i + 1] > prices[i]) currentRating += 1;\n      }\n    }\n\n    const averageRating = attempts > 0 ? currentRating / attempts : 0;\n    if (averageRating > bestRating) {\n      bestRating = averageRating;\n      bestModel = dm;\n    }\n  }\n\n  return { model: bestModel, rating: bestRating };\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-full-example",children:"4. Full example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import init, {\n  candleIndicators,\n  ConstantModelType,\n  DeviationModel\n} from "ti-engine";\n\nawait init();\n\nconst data = [\n  6037.59, 5970.84, 5906.94, 5881.63, 5868.55, 5942.47, 5975.38, 5909.03,\n  5918.25, 5827.04, 5836.22, 5842.91, 5949.91, 5937.34, 5996.66, 6049.24,\n  6086.37, 6118.71, 6101.24, 6012.28, 6067.70, 6039.31, 6071.17, 6040.53,\n  5994.57, 6037.88, 6061.48, 6083.57, 6025.99, 6066.44, 6068.50, 6051.97,\n  6115.07, 6114.63, 6129.58, 6144.15, 6117.52, 6013.13, 5983.25, 5955.25,\n  5956.06, 5861.57, 5954.50, 5849.72, 5778.15, 5842.63, 5738.52, 5770.20,\n  5614.56, 5572.07, 5599.30, 5521.52, 5638.94\n];\n\nfunction chooseBestDeviationModel(\n  prices,\n  {\n    constantModelType = ConstantModelType.ExponentialMovingAverage,\n    deviationMultiplier = 2.0,\n    period = 5,\n  } = {}\n) {\n  const candidates = [\n    DeviationModel.StandardDeviation,\n    DeviationModel.MeanAbsoluteDeviation,\n    DeviationModel.MedianAbsoluteDeviation,\n    DeviationModel.ModeAbsoluteDeviation,\n    DeviationModel.UlcerIndex,\n  ];\n\n  let bestRating = -1;\n  let bestModel = candidates[0];\n\n  for (const dm of candidates) {\n    const bands = candleIndicators.bulk.movingConstantBands(\n      prices,\n      constantModelType,\n      dm,\n      deviationMultiplier,\n      period\n    );\n\n    let currentRating = 0;\n    let attempts = 0;\n\n    for (let i = period - 1; i < prices.length - 1; i++) {\n      const bandsIdx = i - (period - 1);\n      const [lower, , upper] = bands[bandsIdx];\n\n      if (prices[i] > upper) {\n        attempts += 1;\n        if (prices[i + 1] < prices[i]) currentRating += 1;\n      }\n      if (prices[i] < lower) {\n        attempts += 1;\n        if (prices[i + 1] > prices[i]) currentRating += 1;\n      }\n    }\n\n    const averageRating = attempts > 0 ? currentRating / attempts : 0;\n    if (averageRating > bestRating) {\n      bestRating = averageRating;\n      bestModel = dm;\n    }\n  }\n\n  return { model: bestModel, rating: bestRating };\n}\n\nconst period = 5;\nconst devMult = 2.0;\nconst constantModel = ConstantModelType.ExponentialMovingAverage;\n\nconst { model, rating } = chooseBestDeviationModel(data, {\n  constantModelType: constantModel,\n  deviationMultiplier: devMult,\n  period,\n});\n\n// Optional: pretty-print the enum\nconst deviationModelName =\n  Object.entries(DeviationModel).find(([, v]) => v === model)?.[0] ?? String(model);\n\nconsole.log(\n  `Best model for Moving Constant Bands is ${deviationModelName} with a rating of ${rating}`\n);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Notes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Valid ConstantModelType values include:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"ConstantModelType.SimpleMovingAverage"}),"\n",(0,o.jsx)(n.li,{children:"ConstantModelType.SmoothedMovingAverage"}),"\n",(0,o.jsx)(n.li,{children:"ConstantModelType.ExponentialMovingAverage"}),"\n",(0,o.jsx)(n.li,{children:"ConstantModelType.SimpleMovingMedian"}),"\n",(0,o.jsx)(n.li,{children:"ConstantModelType.SimpleMovingMode"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Valid DeviationModel values include:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"DeviationModel.StandardDeviation"}),"\n",(0,o.jsx)(n.li,{children:"DeviationModel.MeanAbsoluteDeviation"}),"\n",(0,o.jsx)(n.li,{children:"DeviationModel.MedianAbsoluteDeviation"}),"\n",(0,o.jsx)(n.li,{children:"DeviationModel.ModeAbsoluteDeviation"}),"\n",(0,o.jsx)(n.li,{children:"DeviationModel.UlcerIndex"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-example-output",children:"\ud83e\uddea Example Output"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"Best model for Moving Constant Bands is MedianAbsoluteDeviation with a rating of 0.67\n"})}),"\n",(0,o.jsx)(n.p,{children:"(Output will vary with data and scoring rules.)"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"-next-steps",children:"\u2705 Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Programmatically choose a period"}),"\n",(0,o.jsx)(n.li,{children:"Programmatically choose a ConstantModelType"}),"\n",(0,o.jsx)(n.li,{children:"Programmatically choose a deviation multiplier"}),"\n",(0,o.jsx)(n.li,{children:"Combine all selections"}),"\n",(0,o.jsx)(n.li,{children:"Introduce punishment to the rating system (e.g., penalize false signals/whipsaws)"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);