"use strict";(self.webpackChunkti_engine_docs=self.webpackChunkti_engine_docs||[]).push([[771],{6895:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorials/plotting","title":"Tutorial 2: Visualizing Indicators with Plotly","description":"Build on Tutorial 1 by adding rich, interactive technical charts in the browser.","source":"@site/docs/tutorials/plotting.md","sourceDirName":"tutorials","slug":"/tutorials/plotting","permalink":"/docs/docs/tutorials/plotting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Tutorial 1: Getting started with ti-engine","permalink":"/docs/docs/tutorials/getting-started"},"next":{"title":"Tutorial 3: Advanced Usage of ti-engine (RSI variant evaluation)","permalink":"/docs/docs/tutorials/advanced"}}');var s=i(4848),l=i(8453);const a={},r="Tutorial 2: Visualizing Indicators with Plotly",o={},d=[{value:"\ud83c\udfaf Goal",id:"-goal",level:2},{value:"\ud83d\udce6 Prerequisites",id:"-prerequisites",level:2},{value:"\ud83d\udcc1 Project scaffold",id:"-project-scaffold",level:2},{value:"\ud83e\uddf1 Data and helpers",id:"-data-and-helpers",level:2},{value:"\u2705 Compute indicators",id:"-compute-indicators",level:2},{value:"\ud83d\udcca Build a multi-row Plotly figure",id:"-build-a-multi-row-plotly-figure",level:2},{value:"\ud83e\uddea Handling missing indicator rows",id:"-handling-missing-indicator-rows",level:2},{value:"\ud83c\udfa8 Styling tips",id:"-styling-tips",level:2},{value:"\ud83e\uddfe Common pitfalls",id:"-common-pitfalls",level:2},{value:"\u2705 Next step",id:"-next-step",level:2}];function c(n){const e={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"tutorial-2-visualizing-indicators-with-plotly",children:"Tutorial 2: Visualizing Indicators with Plotly"})}),"\n",(0,s.jsx)(e.p,{children:"Build on Tutorial 1 by adding rich, interactive technical charts in the browser."}),"\n",(0,s.jsx)(e.p,{children:"This tutorial is the second in the series:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/docs/tutorials/getting-started",children:"01 - Getting started with ti-engine"})}),"\n",(0,s.jsx)(e.li,{children:"02 - Visualizing Indicators with Plotly (this page)"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/docs/tutorials/advanced",children:"03 - More advanced use cases"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/docs/tutorials/api",children:"04 - Getting data from an API"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"/docs/docs/tutorials/websockets",children:"05 - Real-time updates with WebSockets (single vs bulk)"})}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-goal",children:"\ud83c\udfaf Goal"}),"\n",(0,s.jsx)(e.p,{children:"Add interactive Plotly charts on top of indicators computed with ti-engine:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Candlestick chart from inline OHLC data"}),"\n",(0,s.jsx)(e.li,{children:"Overlay Simple Moving Average (SMA)"}),"\n",(0,s.jsx)(e.li,{children:"Overlay Moving Constant Bands (EMA + StdDev)"}),"\n",(0,s.jsx)(e.li,{children:"Add RSI in its own panel (with threshold lines)"}),"\n",(0,s.jsx)(e.li,{children:"Add ATR in a third panel"}),"\n",(0,s.jsx)(e.li,{children:"Optional: interactive toggling of indicators and static export"}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-prerequisites",children:"\ud83d\udce6 Prerequisites"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"A modern browser and a bundler (Vite, Webpack, etc.) for ESM modules"}),"\n",(0,s.jsx)(e.li,{children:"ti-engine and Plotly.js"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Install dependencies:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install ti-engine plotly.js-dist-min\n"})}),"\n",(0,s.jsx)(e.p,{children:"If you prefer a CDN for Plotly, you can include it via a script tag instead of installing."}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-project-scaffold",children:"\ud83d\udcc1 Project scaffold"}),"\n",(0,s.jsx)(e.p,{children:"Minimal HTML (place in public/index.html or similar). If using the Plotly CDN, include the script tag; if using the npm package, you can import it in JS instead."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:'<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <title>Technical Indicators Dashboard</title>\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    \x3c!-- Option A: Use Plotly via CDN (global Plotly variable) --\x3e\n    <script src="https://cdn.plot.ly/plotly-2.30.0.min.js"><\/script>\n  </head>\n  <body>\n    <div id="chart" style="width: 100%; max-width: 1200px; margin: 0 auto;"></div>\n    <script type="module" src="/plotly-dashboard.mjs"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-data-and-helpers",children:"\ud83e\uddf1 Data and helpers"}),"\n",(0,s.jsxs)(e.p,{children:["We\u2019ll use a constant array for Close prices and derive simple Open/High/Low for the demo.",(0,s.jsx)(e.br,{}),"\n","In practice, use real OHLC."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'// plotly-dashboard.mjs\nimport init, {\n  movingAverage,\n  momentumIndicators,\n  candleIndicators,\n  otherIndicators,\n  ConstantModelType,\n  DeviationModel,\n  MovingAverageType\n} from "ti-engine";\n\n// If you installed Plotly via npm instead of CDN:\n// import Plotly from "plotly.js-dist-min";\n\nawait init();\n\n// Close prices (inline)\nconst close = [\n  6037.59, 5970.84, 5906.94, 5881.63, 5868.55, 5942.47, 5975.38, 5909.03,\n  5918.25, 5827.04, 5836.22, 5842.91, 5949.91, 5937.34, 5996.66, 6049.24,\n  6086.37, 6118.71, 6101.24, 6012.28, 6067.70, 6039.31, 6071.17, 6040.53,\n  5994.57, 6037.88, 6061.48, 6083.57, 6025.99, 6066.44, 6068.50, 6051.97,\n  6115.07, 6114.63, 6129.58, 6144.15, 6117.52, 6013.13, 5983.25, 5955.25,\n  5956.06, 5861.57, 5954.50, 5849.72, 5778.15, 5842.63, 5738.52, 5770.20,\n  5614.56, 5572.07, 5599.30, 5521.52, 5638.94\n];\n\n// Derive simple Open/High/Low for demo purposes\nconst open = close.map((c, i) => (i === 0 ? c : close[i - 1]));\nconst high = close.map((c, i) => Math.max(c, open[i]) + 20);\nconst low  = close.map((c, i) => Math.min(c, open[i]) - 20);\n\n// Simple daily dates (YYYY-MM-DD); adjust start as you like\nconst start = new Date(2025, 0, 1);\nconst dates = Array.from({ length: close.length }, (_, i) => {\n  const d = new Date(start);\n  d.setDate(d.getDate() + i);\n  return d.toISOString().slice(0, 10);\n});\n\n// Helper to align a rolling series to the right edge of dates\nconst alignTail = (x, y) => ({\n  x: x.slice(x.length - y.length),\n  y\n});\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-compute-indicators",children:"\u2705 Compute indicators"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"SMA(20) via movingAverage.bulk.movingAverage"}),"\n",(0,s.jsx)(e.li,{children:"Moving Constant Bands (EMA + StdDev, x2, period 20)"}),"\n",(0,s.jsx)(e.li,{children:"RSI(20) via momentumIndicators.bulk.relativeStrengthIndex"}),"\n",(0,s.jsx)(e.li,{children:"ATR(20) via otherIndicators.bulk.averageTrueRange"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"// Parameters\nconst period = 20;\n\n// SMA\nconst sma20 = movingAverage.bulk.movingAverage(\n  close,\n  MovingAverageType.Simple,\n  period\n);\n\n// Moving Constant Bands (EMA + StdDev)\nconst bands = candleIndicators.bulk.movingConstantBands(\n  close,\n  ConstantModelType.ExponentialMovingAverage,\n  DeviationModel.StandardDeviation,\n  2.0,\n  period\n);\nconst lowerBand = bands.map(t => t[0]);\nconst midBand   = bands.map(t => t[1]);\nconst upperBand = bands.map(t => t[2]);\n\n// RSI\nconst rsi20 = momentumIndicators.bulk.relativeStrengthIndex(\n  close,\n  ConstantModelType.SmoothedMovingAverage,\n  period\n);\n\n// ATR\nconst atr20 = otherIndicators.bulk.averageTrueRange(\n  close, // previous closes\n  high,\n  low,\n  ConstantModelType.ExponentialMovingAverage,\n  period\n);\n\n// Aligned x for rolling outputs (right-aligned)\nconst xSMA  = alignTail(dates, sma20).x;\nconst xBands = alignTail(dates, lowerBand).x;\nconst xRSI  = alignTail(dates, rsi20).x;\nconst xATR  = alignTail(dates, atr20).x;\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-build-a-multi-row-plotly-figure",children:"\ud83d\udcca Build a multi-row Plotly figure"}),"\n",(0,s.jsx)(e.p,{children:"Layout plan:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Row 1: Candlestick + SMA + Bands (shaded between lower/upper)"}),"\n",(0,s.jsx)(e.li,{children:"Row 2: RSI + threshold lines (70 / 30)"}),"\n",(0,s.jsx)(e.li,{children:"Row 3: ATR (bar)"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"In Plotly.js, we\u2019ll create a grid of 3 rows and assign traces to x/y axes x, x2, x3 and y, y2, y3."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'const traces = [\n  // Row 1: Candlestick\n  {\n    type: "candlestick",\n    x: dates,\n    open,\n    high,\n    low,\n    close,\n    name: "Price",\n    increasing: { line: { color: "#26a69a" } },\n    decreasing: { line: { color: "#ef5350" } },\n    xaxis: "x",\n    yaxis: "y"\n  },\n\n  // Row 1: SMA(20)\n  {\n    type: "scatter",\n    mode: "lines",\n    x: xSMA,\n    y: sma20,\n    name: "SMA 20",\n    line: { color: "orange", width: 1.3 },\n    hovertemplate: "SMA %{y:.2f}<extra></extra>",\n    xaxis: "x",\n    yaxis: "y"\n  },\n\n  // Row 1: Bands Upper then Lower (Lower fills to next y)\n  {\n    type: "scatter",\n    mode: "lines",\n    x: xBands,\n    y: upperBand,\n    name: "MCB Upper",\n    line: { color: "royalblue", width: 1 },\n    opacity: 0.7,\n    hovertemplate: "Upper %{y:.2f}<extra></extra>",\n    xaxis: "x",\n    yaxis: "y"\n  },\n  {\n    type: "scatter",\n    mode: "lines",\n    x: xBands,\n    y: lowerBand,\n    name: "MCB Lower",\n    line: { color: "royalblue", width: 1 },\n    fill: "tonexty",\n    fillcolor: "rgba(65,105,225,0.15)",\n    opacity: 0.7,\n    hovertemplate: "Lower %{y:.2f}<extra></extra>",\n    xaxis: "x",\n    yaxis: "y"\n  },\n  // Row 1: Bands mid (EMA)\n  {\n    type: "scatter",\n    mode: "lines",\n    x: xBands,\n    y: midBand,\n    name: "MCB Mid (EMA)",\n    line: { color: "royalblue", width: 0.8, dash: "dot" },\n    opacity: 0.6,\n    hovertemplate: "Mid %{y:.2f}<extra></extra>",\n    xaxis: "x",\n    yaxis: "y"\n  },\n\n  // Row 2: RSI(20)\n  {\n    type: "scatter",\n    mode: "lines",\n    x: xRSI,\n    y: rsi20,\n    name: "RSI (20)",\n    line: { color: "purple" },\n    hovertemplate: "RSI %{y:.2f}<extra></extra>",\n    xaxis: "x2",\n    yaxis: "y2"\n  },\n\n  // Row 3: ATR(20)\n  {\n    type: "bar",\n    x: xATR,\n    y: atr20,\n    name: "ATR 20",\n    marker: { color: "gray" },\n    opacity: 0.7,\n    hovertemplate: "ATR %{y:.2f}<extra></extra>",\n    xaxis: "x3",\n    yaxis: "y3"\n  }\n];\n\nconst layout = {\n  title: "Technical Indicators Dashboard",\n  template: "plotly_white",\n  hovermode: "x unified",\n  margin: { l: 40, r: 40, t: 60, b: 40 },\n  legend: { orientation: "h", yanchor: "bottom", y: 1.02, xanchor: "right", x: 1 },\n\n  // 3-row grid of independent subplots\n  grid: { rows: 3, columns: 1, pattern: "independent", roworder: "top to bottom" },\n\n  // Row heights via domain\n  yaxis:  { domain: [0.45, 1.0], title: "Price" },\n  yaxis2: { domain: [0.22, 0.42], title: "RSI", range: [0, 100] },\n  yaxis3: { domain: [0.0,  0.20], title: "ATR" },\n\n  xaxis:  { showspikes: true, spikemode: "across" },\n  xaxis2: { showspikes: true, spikemode: "across" },\n  xaxis3: { showspikes: true, spikemode: "across" },\n\n  // RSI horizontal threshold lines (yref ties to y2)\n  shapes: [\n    {\n      type: "line",\n      xref: "x2",\n      yref: "y2",\n      x0: xRSI[0],\n      x1: xRSI[xRSI.length - 1],\n      y0: 70, y1: 70,\n      line: { dash: "dash", color: "red" }\n    },\n    {\n      type: "line",\n      xref: "x2",\n      yref: "y2",\n      x0: xRSI[0],\n      x1: xRSI[xRSI.length - 1],\n      y0: 30, y1: 30,\n      line: { dash: "dash", color: "green" }\n    }\n  ],\n\n  xaxis_rangeslider_visible: false\n};\n\nconst config = {\n  responsive: true,\n  displaylogo: false,\n  modeBarButtonsToRemove: ["select2d", "lasso2d"]\n};\n\nPlotly.newPlot("chart", traces, layout, config);\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-handling-missing-indicator-rows",children:"\ud83e\uddea Handling missing indicator rows"}),"\n",(0,s.jsx)(e.p,{children:"Rolling indicators start later; we aligned to the right using x slices:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"For a rolling series Y of length M over dates of length L, we use dates.slice(L - M) as the x-values."}),"\n",(0,s.jsx)(e.li,{children:"Alternatively, you can pad the left of Y with nulls to match L and plot against full dates."}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-styling-tips",children:"\ud83c\udfa8 Styling tips"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:'Dark theme: set layout.template = "plotly_dark"'}),"\n",(0,s.jsx)(e.li,{children:'Band opacity tweak: lower-trace fillcolor "rgba(65,105,225,0.08)"'}),"\n",(0,s.jsx)(e.li,{children:"Add more MAs (e.g., SMA 50/200) as additional scatter lines"}),"\n",(0,s.jsx)(e.li,{children:'Use hovermode "x unified" for synchronized tooltips across rows'}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-common-pitfalls",children:"\ud83e\uddfe Common pitfalls"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Issue"}),(0,s.jsx)(e.th,{children:"Cause"}),(0,s.jsx)(e.th,{children:"Fix"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Bands misaligned"}),(0,s.jsx)(e.td,{children:"Wrong x alignment"}),(0,s.jsx)(e.td,{children:"Use dates.slice(dates.length - bands.length)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"RSI flatlining"}),(0,s.jsx)(e.td,{children:"Period too long or low volatility"}),(0,s.jsx)(e.td,{children:"Try a shorter period; verify inputs"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"ATR bars obscure price"}),(0,s.jsx)(e.td,{children:"Added to row 1 by mistake"}),(0,s.jsx)(e.td,{children:"Ensure xaxis/xaxisN and yaxis/yaxisN are correct"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Init errors in browser"}),(0,s.jsx)(e.td,{children:"Missing await init()"}),(0,s.jsx)(e.td,{children:"Always await init() before calling indicators"})]})]})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"-next-step",children:"\u2705 Next step"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"/docs/docs/tutorials/advanced",children:"Advanced use cases to ti-engine"})}),"\n",(0,s.jsx)(e.p,{children:"Happy charting! \ud83d\udcc8\ud83e\udd80"})]})}function h(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function a(n){const e=t.useContext(l);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(l.Provider,{value:e},n.children)}}}]);